name: CI with Auto Versioning

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        python-version: [ "3.11" ]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Ensure full Git history for versioning

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: Run tests with coverage
        run: |
          pytest --cov=tz_logging --cov-report=xml
          coverage report --fail-under=80  # Require at least 80% coverage

      - name: Upload coverage report
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: coverage.xml

  versioning:
    needs: test  # Only run if tests pass
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'  # Only run on merges to main

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Ensure full Git history for versioning

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install setuptools_scm
        run: |
          python -m pip install --upgrade pip setuptools setuptools_scm

      - name: Auto-increment version
        id: version
        run: |
          echo "VERSION=$(python -m setuptools_scm)" >> $GITHUB_ENV
          echo "Version detected: $VERSION"

      - name: Create Git tag
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git tag $VERSION
          git push origin $VERSION

      - name: Publish Version (Optional)
        run: echo "New version $VERSION created and tagged!"
